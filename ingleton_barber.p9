
% Saved by Prover9-Mace4 Version 0.5, December 2007.
% Last line is a lie. It is there to stop the Prover9-Mace4
% GUI giving a warning when the file is loaded.
% This file was actually reated by BB Prover9 Autograder

set(ignore_option_dependencies). % GUI handles dependencies

if(Prover9). % Options for Prover9
  clear(auto).
  clear(auto_setup).
  clear(auto_limits).
  clear(auto_denials).
  clear(auto_inference).
  clear(auto_process).
  assign(eq_defs, pass).
  assign(max_seconds, 10).
  assign(max_weight, 2147483647).
  assign(sos_limit, -1).
  clear(predicate_elim).
  set(binary_resolution).
  set(paramodulation).
  set(factor).
end_if.

if(Mace4).   % Options for Mace4
  assign(max_seconds, 60).
end_if.

formulas(assumptions).

%% The Ingleton Barber
%% A logic puzzle by Brandon Bennett
%%
%% Prover9 file: ingleton_barber.p9

%% To solve this first-order logic proof problem, you must replace
%% each of the assumption place-holders __An__ and the goal place-holder
%% __G__, with an approapriate first-order formula that captures the
%% meaning of the given English sentence.
%% 
%% Then run Prover9. 
%% If your representations are correct, it should find a Proof.
%% You can also check your representations using the Gradescope Autograder.

%% In writing the formulae, you should only use the following vocabulary:
%%
%% Logical symbols:           &  |  -  ->   <->  =  all  exists
%% Brackets and separators:   ( )  [  ]  ,  .
%% Variables:                 Whatever you like, but must be quantified.
%%
%% Constants: tom, alfred, ingleton, me%% Property Predicates: Person, Village, Old, Blind, Barber, Bearded, Pink, Dog, Homework%% Relation Predicates: Lives, IsFatherOf, Shaves, Ate, Of%% Equality relation: =
%%
%% Use only the specified vocabulary, otherwise the autograder will not work.



%% A1: "Two of the people who live in the village Ingleton are Tom and his old father, Alfred,
%%                             who is blind."

        exists tom exists alfred(Lives(person(tom), Village(ingleton)) & Lives((Person(alfred) , Village(ingleton))
        & IsFatherOf(alfred, tom) & Old(alfred) & Blind(alfred).
     

%% A2: "The concept of 'barber' can be defined as: "any person who shaves some other person". **"

        Barber(x) <-> Shaves(Person(x),Person(y)).

%% A3: "No barber is bearded and no person is shaved by a blind person, so Tom shaves Alfred.***"

        (-exists x(Barber(x) & Bearded(x))) & -(Shaves(Blind(Person(y)), Person(w)) -> Shaves(Person(tom), Person (alfred)).
        %% no barber that is bearded        

%% A4: " Everyone who lives in a village has a beard, unless they shave themself
%%                                or are shaved by a barber who lives in the same village. ****"

        all x all y( Lives (x,village(y)) 
        & -( Shaves(x,x) | (exists w exists y( lives (Barber(w),y) & Shaves(w,x)))
        -> Bearded(x)).

%% A5: "No more than one barber lives in any village and
%%                              everyone living in Ingleton who shaves themself never gets shaved by a barber."

        (-all v exists y exists z(Barber(y) & Barber(z) & Lives(y,v) & Lives(z,v) & -(y=z)))
        & 
        (all x all u(Lives(x, Village(ingleton)) & Shaves(x,x) & -Shaves(Barber(u), x)).
        


end_of_list.

formulas(goals).

%% GOAL: "A pink dog ate my homework. *****"

          exists x y (Ate (Pink(Dog(x)),Homework(y))) .

end_of_list.
