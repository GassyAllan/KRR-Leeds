
% Saved by Prover9-Mace4 Version 0.5, December 2007.
% Last line is a lie. It is there to stop the Prover9-Mace4
% GUI giving a warning when the file is loaded.
% This file was actually reated by BB Prover9 Autograder

set(ignore_option_dependencies). % GUI handles dependencies

if(Prover9). % Options for Prover9
  clear(auto).
  clear(auto_setup).
  clear(auto_limits).
  clear(auto_denials).
  clear(auto_inference).
  clear(auto_process).
  assign(eq_defs, pass).
  assign(max_seconds, 10).
  assign(max_weight, 2147483647).
  assign(sos_limit, -1).
  clear(predicate_elim).
  set(binary_resolution).
  set(paramodulation).
  set(factor).
end_if.

if(Mace4).   % Options for Mace4
  assign(max_seconds, 60).
end_if.

formulas(assumptions).

%% Hipster Chips
%% A logic puzzle by Brandon Bennett
%%
%% Prover9 file: hipster_chips.p9

%% To solve this first-order logic proof problem, you must replace
%% each of the assumption place-holders __An__ and the goal place-holder
%% __G__, with an approapriate first-order formula that captures the
%% meaning of the given English sentence.
%% 
%% Then run Prover9. 
%% If your representations are correct, it should find a Proof.
%% You can also check your representations using the Gradescope Autograder.

%% In writing the formulae, you should only use the following vocabulary:
%%
%% Logical symbols:           &  |  -  ->   <->  =  all  exists
%% Brackets and separators:   ( )  [  ]  ,  .
%% Variables:                 Whatever you like, but must be quantified.
%%
%% Name Constants: sam, tam%% Property Predicates: Student, WearsEarhooks, LongHair, ShortHair, Sporty, Hipster, Tune, Vegetarian, Food, Meat, Snack, Chips, BurgerVan%% Relation Predicates: Likes, Whistles, Eats, AllergicTo, Contains, From
%%
%% Use only the specified vocabulary, otherwise the autograder will not work.



%% A1: "Sam and Tam are students who both wear earhook headphones. *"

        Student(sam) & Student(tam) & WearsEarhooks(sam) & WearsEarhooks(tam).

%% A2: "Sam has long hair and does not like sport."

        all x(Sporty(x) -> -Likes(sam, x)) & LongHair(sam).

%% A3: "Sporty students don't have long hair."

        all x( (Student(x) & Sporty(x)) -> -LongHair(x)).

%% A4: "Hipsters only like tunes that no non-hipster likes."

        all x all y all z( (-Hipster(x) & Tune(y) & Likes(x,y)) -> -(Hipster(z) & Likes(z,y)) ) .

%% A5: "Hispsters either have long hair or short hair."

        all x( (Hipster(x) -> LongHair(x)) | (Hipster(x) -> ShortHair(x)) ).

%% A6: "Students only whistle tunes they like."

        all x all y ( Student(x) & Tune(y) & Whistles (x,y) -> Likes(x,y) ).

%% A7: "Sam and Tam both whistle the same tune."

        exists x(Tune(x) & Whistles(sam,x) & Whistles(tam,x)).

%% A8: "Only hipsters and sporty students wear earhook headphones."

        all x( -(Hipster(x) | (Sporty(x) & Student(x))) -> -WearsEarhooks(x) ) .

%% A9: "All long-haired hipsters are vegetarians."

        all x (LongHair(x) & Hipster(x) -> Vegetarian(x) ).

%% A10: "All hipsters with short hair are allergic to something."

        all x exists y( Hipster(x) & ShortHair(x) -> AllergicTo(x,y) ).

%% A11: "Tam is not allergic to anything."

        -(exists y(AllergicTo(tam,y))).

%% A12: "Vegetarians don't eat food that contains meat. **"

        all v all x all y(Vegetarian(v) & Food(x) & Meat(y) & Contains(x,y) -> -Eats(v,x) ).

%% A13: "All snacks from burger vans contain meat except chips."

        all x all z exists v( ((Snack(x) & BurgerVan(z) & From(x,z) & Meat(v)) & -(Snack(x) = Chips(x)) ) -> Contains(x,v)).

%% A14: "Tam is eating a snack from a burger van."

        exists x exists y( BurgerVan(x) & Snack(y) & From(y,x) & Eats(tam,y) ).

%% A15: "Give a general axiom linking the concepts 'snack' and 'food'. ***"

        -(exists x(-Food(x) | -Snack(x))).


end_of_list.

formulas(goals).

%% GOAL: "Tam is eating chips."

         exists x(Chips(x) & Eats(tam,x) ).

end_of_list.
